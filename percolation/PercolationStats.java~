import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;
import java.lang.*;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;
public class PercolationStats {
    double[] threshold;
    int t;
    double mean;
    double stddev;
    
    public PercolationStats(int N,int T) {
        if(N<=0 || T<=0)
            throw new IllegalArgumentException("Invalid Param");
        
        //Monte Carlo simulation
        t = T;
        threshold = new double[T];
        for(int i=0;i<T;i++)
        {
            Percolation per = new Percolation(N);
            int count = 0;
            while(!per.percolates())
            {
                int a,b;
                
                do {
                a = StdRandom.uniform(1,N+1);
                b = StdRandom.uniform(1,N+1);
                StdOut.println(a);
                StdOut.println(b);
                }while(a<1 || a>N || b<1 || b>N || per.isOpen(a,b));
                
                count++;
                per.open(a,b);
                
            }
            threshold[i] = ((double)count)/(N*N);     
        }
        
    }
    
    public double mean() {
        this.mean = StdStats.mean(threshold);
        return this.mean;
    }
    public double stddev() {
        this.stddev = StdStats.stddev(threshold);
        return this.stddev;
    }
    public double confidenceLo() {
        double lo = mean - 1.96*stddev/Math.sqrt(t);
        return lo;
    }
    public double confidenceHi() {
        double hi = mean + 1.96*stddev/Math.sqrt(t);
        return hi;
    }
    
    public static void main(String[] args) {
    int n = StdIn.readInt();
    int t = StdIn.readInt();
    PercolationStats stats = new PercolationStats(n,t);
    StdOut.println("mean = " + stats.mean());
    StdOut.println("stddev = " + stats.stddev());
    StdOut.println("95% confidence interval = "+stats.confidenceLo() + ", "+ stats.confidenceHi());
    }
}