import java.lang.*;
import edu.princeton.cs.algs4.WeightedQuickUnionUF;
import edu.princeton.cs.algs4.StdOut;
public class Percolation {
    int[][] grid;
    int n;
    WeightedQuickUnionUF uf;
    public Percolation(int N) {
        //initialize all elements as 0
        //row: 0~N-1
        //col: 0~N-1
        if(N<=0)
            throw new IllegalArgumentException(Integer.toString(N));
        n = N;
        grid = new int[n][n]; 
        
        // for every element, we use row*n+col as its index
        uf = new WeightedQuickUnionUF(n*n);
    }
    public void open(int i,int j) {
        if(i<1 || i > n || j<1 || j>n)
            throw new IndexOutOfBoundsException("Index out of bound");
        if(!isOpen(i-1,j-1))
               grid[i-1][j-1] = 1;
        //union up
        if(i-1>0 && isOpen(i-1,j) )
            uf.union((i-2)*n+j-1,(i-1)*n+j-1);
        //union down
        if(i+1<=n && isOpen(i+1,j) )
            uf.union(i*n+j-1,(i-1)*n+j-1);
        //union left
        if(j-1>0 && isOpen(i,j-1) )
            uf.union((i-1)*n+j-2,(i-1)*n+j-1);
        //union right
        if(j+1<=n && isOpen(i,j+1) )
            uf.union((i-1)*n+j,(i-1)*n+j-1);
    
    }
    public boolean isOpen(int i,int j){
        StdOut.println(i+" "+j);
        if(i<1 || i>n || j<1 || j>n)
            throw new IndexOutOfBoundsException("Index out of bound:("+Integer.toString(i)+","+Integer.toString(j)+")");
        return grid[i-1][j-1] == 1;
    }
    public boolean isFull(int i,int j){
        if(i<1 || i > n || j<1 || j>n)
            throw new IndexOutOfBoundsException("Index out of bound");
        if(!isOpen(i,j))
            return false;
        // the top row
        int res=uf.find((i-1)*n+j-1);
        return  res>= 0 && res<=n-1;
        
    }
    public boolean percolates(){
        for(int j=1;j<=n;j++)
            if(isFull(n,j))
            return true;
        return false;
    }
    
}